
import json
import os
from .rag_sender import send_to_rag

# Path to base_context.json
BASE_CONTEXT_PATH = os.path.join(os.path.dirname(__file__), '../', 'base_context.json')

def filter_and_send_context():
    """
    Reads base_context.json, filters entries generated by SolarisProAi,
    and sends them to the RAG service.
    """
    try:
        with open(BASE_CONTEXT_PATH, 'r', encoding='utf-8') as f:
            data = json.load(f)
    except FileNotFoundError:
        print(f"(!) Eroare: Fisierul {BASE_CONTEXT_PATH} nu a fost gasit.")
        return
    except json.JSONDecodeError:
        print(f"(!) Eroare: Fisierul {BASE_CONTEXT_PATH} nu este un JSON valid.")
        return

    solaris_pro_ai_entries = []
    for entry in data.get('context', []):
        if entry.get('type') == 'email':
            if "solarisproai.com" in entry.get('from', ''):
                solaris_pro_ai_entries.append(entry)
        elif entry.get('type') == 'twitter':
            if "SolarisProAi" in entry.get('title', '') or "SolarisProAi" in entry.get('content', ''):
                solaris_pro_ai_entries.append(entry)

    if not solaris_pro_ai_entries:
        print("Nu s-au gasit intrari relevante de la SolarisProAi in base_context.json.")
        return

    print(f"Se trimit {len(solaris_pro_ai_entries)} intrari SolarisProAi catre RAG...")
    for entry in solaris_pro_ai_entries:
        # Extrage 'body' sau 'content' din intrare
        content_to_send = entry.get('body') or entry.get('content')

        if content_to_send:
            # Trimite doar continutul catre RAG
            payload = {"input": content_to_send}
            send_to_rag(payload)
        else:
            print(f"(!) Avertisment: Nu s-a gasit 'body' sau 'content' pentru o intrare.")

    print("Procesul de trimitere a datelor SolarisProAi catre RAG a fost finalizat.")

if __name__ == "__main__":
    filter_and_send_context()
